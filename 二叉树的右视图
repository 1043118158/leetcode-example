给定一个二叉树的 根节点 root，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。
//我的新一次test

输入: [1,2,3,null,5,null,4]
输出: [1,3,4]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
      //思路就是层序遍历，但是，每层只要最后一个数字
      vector<int>v;
      if(root==nullptr)
      return v;
      queue<TreeNode*>q;
      q.push(root);
        TreeNode*node=nullptr;
      while(!q.empty())
      {
          int size =q.size();
          while(size--)
          {
        node =q.front();
        q.pop();
        if(node->left)q.push(node->left);
        if(node->right)q.push(node->right);
      }
      v.push_back(node->val);
    }
    return v;
    }
};
